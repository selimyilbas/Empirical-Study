{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red46\green49\blue51;}
{\*\expandedcolortbl;;\cssrgb\c23529\c25098\c26275;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You need to compare the performance of six sorting algorithms: BubbleSort, SelectionSort, QuickSort, MergeSort, Improved BubbleSort, and Improved Quicksort. We aim to evaluate the efficiency of these algorithms in terms of time complexity and practical performance for varying input sizes.\
\
So you are already familiar with BubbleSort, Selection Sort, QuickSort, and MergeSort. For an improved version of BubleSort, modify it so that the algorithm returns early if the input is already sorted.\'a0 For an improved version of QuickSort, make a modification so that the algorithm uses SelectionSort if the input size is less than a threshold value(20, for example) instead of going on with recursion.\
\
You need to measure the execution time of your implementations. You are free to pick any programming language.\
\
Implement the six algorithms in the same programming language to ensure fair comparisons. You can get the code from the web. However, this is an individual project. You need to do the project alone.\
\
Generate random input of varying sizes (e.g., , 100,1000,1000000 ...).\
Measure the execution time for each algorithm using a reliable timer. You need only to measure the function that implements the actual sorting. Do not include any other processing into your time.\
Compare the time taken by each algorithm for different inputs.\
Use the same input files for all six algorithms.\
Ignore the first run of your algorithms as they involve memory operations such as reading files and caching.\
Use an average of multiple runs to mitigate variations.\
\
*Answer this question:\
What is the biggest problem size you can run in two seconds? (Assuming there are no memory issues)\
\
Prepare an Excel line chart and show the results of your experiments.\
\
Prepare a video and upload it to YouTube. In the video, show the execution of your algorithms and their input sizes for two seconds. Provide the link along with your report.\
\
Make a verdict about the practical usage of these algorithms.\
\
Prepare a PDF file with your chart and link and upload it as your final report.}